name: Install yq
description: Installs mikefarah/yq on the job's runner
author: Daniel Weibel
inputs:
  version:
    description: The version of yq to install (by default, the latest version is installed)
    required: false
  binary:
    description: The name of the yq binary to install (by default, 'yq_linux_amd64' is used for Linux runners and 'yq_darwin_amd64' for macOS runners)
    required: false
  github-token:
    description: A GitHub API access token, such as a personal access token (PAT) or an installation access token (like the GitHub Actions GITHUB_TOKEN secret), for making authenticated requests to the GitHub APIs (by default, GitHub API requests are unauthenticated)
    required: false
runs:
  using: composite
  steps:
 
    - name: util
      id: util
      run: |
        file=$(mktemp)
        cat <<'EOF' >"$file"
        fail() {
          echo "::error::$1" | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/%0A/g'
          exit 1
        }
        api() {
          args=(-s -S -f)
          [[ "${{ inputs.github-token }}" ]] && args+=(-H "Authorization: Token ${{ inputs.github-token }}")
          curl "${args[@]}" "$GITHUB_API_URL$1"
        }
        EOF
        echo "::set-output name=util::$file"
      shell: bash
 
    - name: check-os
      run: |
        . "${{ steps.util.outputs.util }}"
        if [[ "${{ runner.os }}" = Windows ]]; then
          fail "This action currently does not support Windows runners"
        fi
      shell: bash

    - name: determine-version
      id: version
      run: |
        . "${{ steps.util.outputs.util }}"
        VERSION="${{ inputs.version }}"
        if [[ -z "$VERSION" ]]; then
          # Determine latest version
          out=$(api /repos/mikefarah/yq/releases/latest 2>&1) || fail "GitHub API request failed: $out"
          VERSION=$(echo "$out" | jq -r .tag_name)
        else
          # Verify user-supplied version
          out=$(api /repos/mikefarah/yq/releases 2>&1) || fail "GitHub API request failed: $out"
          if ! echo "$out" | jq -r '.[].tag_name' | grep -q "^$VERSION$"; then
            fail "$VERSION is not a valid yq version (see https://github.com/mikefarah/yq/releases for the list of valid versions)"
          fi
        fi
        echo "Using yq version $VERSION"
        echo "::set-output name=version::$VERSION"
      shell: bash

    - name: determine-binary
      id: binary
      run: |
        . "${{ steps.util.outputs.util }}"
        BINARY="${{ inputs.binary }}"
        if [[ -z "$BINARY" ]]; then
          # Use default binaries
          case "${{ runner.os }}" in
            Linux) BINARY=yq_linux_amd64 ;;
            macOS) BINARY=yq_darwin_amd64 ;;
          esac
        else
          # Verify user-supplied binary
          out=$(api /repos/mikefarah/yq/releases/tags/${{ steps.version.outputs.version }} 2>&1) || fail "GitHub API request failed: $out"
          if ! echo "$out" | jq -r '.assets[].name' | grep -q "^$BINARY$"; then
            fail "$BINARY is not a valid binary of yq ${{ steps.version.outputs.version }} (see https://github.com/mikefarah/yq/releases/${{ steps.version.outputs.version }} for the list of valid binaries)"
          fi
        fi
        echo "Using yq binary $BINARY"
        echo "::set-output name=binary::$BINARY"
      shell: bash

    - name: install
      run: |
        url=https://github.com/mikefarah/yq/releases/download/${{ steps.version.outputs.version }}/${{ steps.binary.outputs.binary }}
        echo "Installing yq from $url"
        # TODO: install to user directory and adapt PATH (avoid reliance on passwordless sudo)
        sudo wget -q -O /usr/local/bin/yq "$url" && sudo chmod +x /usr/local/bin/yq
      shell: bash

    - name: verify
      run: |
        . "${{ steps.util.outputs.util }}"
        echo "Verifying installation"
        stderr=$(yq 2>&1 >/dev/null) || fail "Installation verification failed: $stderr"
        echo "Installation of yq successful"
      shell: bash
